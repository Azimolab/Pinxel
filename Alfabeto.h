class Alfabeto{

const uint8_t SpriteAlfabetoData[1525] = {
  B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),
  B8_4BIT(00000010),B8_4BIT(00222200),B8_4BIT(03330044),B8_4BIT(40005555),B8_4BIT(50666660),B8_4BIT(07770080),B8_4BIT(00800999),B8_4BIT(00000000),
  B8_4BIT(00000101),B8_4BIT(00200020),B8_4BIT(30003040),B8_4BIT(04005000),B8_4BIT(00600000),B8_4BIT(70007080),B8_4BIT(00800090),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(10200020),B8_4BIT(30000040),B8_4BIT(00405000),B8_4BIT(00600000),B8_4BIT(70000080),B8_4BIT(00800090),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(10222200),B8_4BIT(30000040),B8_4BIT(00405555),B8_4BIT(00666600),B8_4BIT(70777088),B8_4BIT(88800090),B8_4BIT(00000000),
  B8_4BIT(00001111),B8_4BIT(10200020),B8_4BIT(30000040),B8_4BIT(00405000),B8_4BIT(00600000),B8_4BIT(70007080),B8_4BIT(00800090),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(10200020),B8_4BIT(30003040),B8_4BIT(04005000),B8_4BIT(00600000),B8_4BIT(70007080),B8_4BIT(00800090),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(10222200),B8_4BIT(03330044),B8_4BIT(40005555),B8_4BIT(50600000),B8_4BIT(07770080),B8_4BIT(00800999),B8_4BIT(00000000),
  B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),
  B8_4BIT(00000000),B8_4BIT(10200020),B8_4BIT(30000040),B8_4BIT(00405000),B8_4BIT(50066600),B8_4BIT(77770008),B8_4BIT(88009999),B8_4BIT(00000000),
  B8_4BIT(00000000),B8_4BIT(10200200),B8_4BIT(30000044),B8_4BIT(04405000),B8_4BIT(50600060),B8_4BIT(70007080),B8_4BIT(00809000),B8_4BIT(90000000),
  B8_4BIT(00000000),B8_4BIT(10202000),B8_4BIT(30000040),B8_4BIT(40405500),B8_4BIT(50600060),B8_4BIT(70007080),B8_4BIT(00809000),B8_4BIT(90000000),
  B8_4BIT(00000000),B8_4BIT(10220000),B8_4BIT(30000040),B8_4BIT(40405050),B8_4BIT(50600060),B8_4BIT(70007080),B8_4BIT(00809999),B8_4BIT(00000000),
  B8_4BIT(00000000),B8_4BIT(10202000),B8_4BIT(30000040),B8_4BIT(00405005),B8_4BIT(50600060),B8_4BIT(77770080),B8_4BIT(80809090),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(10200200),B8_4BIT(30000040),B8_4BIT(00405000),B8_4BIT(50600060),B8_4BIT(70000080),B8_4BIT(08809009),B8_4BIT(00000000),
  B8_4BIT(00000111),B8_4BIT(00200020),B8_4BIT(33333040),B8_4BIT(00405000),B8_4BIT(50066600),B8_4BIT(70000008),B8_4BIT(88809000),B8_4BIT(90000000),
  B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),
  B8_4BIT(00000111),B8_4BIT(00222220),B8_4BIT(30003040),B8_4BIT(00405000),B8_4BIT(50600060),B8_4BIT(70007088),B8_4BIT(88800909),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(10002000),B8_4BIT(30003040),B8_4BIT(00405000),B8_4BIT(50600060),B8_4BIT(70007000),B8_4BIT(00800909),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(00002000),B8_4BIT(30003040),B8_4BIT(00405000),B8_4BIT(50060600),B8_4BIT(70007000),B8_4BIT(08000909),B8_4BIT(00000000),
  B8_4BIT(00000111),B8_4BIT(00002000),B8_4BIT(30003040),B8_4BIT(00405050),B8_4BIT(50006000),B8_4BIT(07070000),B8_4BIT(80000909),B8_4BIT(00000000),
  B8_4BIT(00000000),B8_4BIT(10002000),B8_4BIT(30003040),B8_4BIT(00405050),B8_4BIT(50060600),B8_4BIT(00700008),B8_4BIT(00000909),B8_4BIT(00000000),
  B8_4BIT(00001000),B8_4BIT(10002000),B8_4BIT(30003004),B8_4BIT(04005050),B8_4BIT(50600060),B8_4BIT(00700080),B8_4BIT(00000000),B8_4BIT(00000000),
  B8_4BIT(00000111),B8_4BIT(00002000),B8_4BIT(03330000),B8_4BIT(40000505),B8_4BIT(00600060),B8_4BIT(00700088),B8_4BIT(88800909),B8_4BIT(00000000),
  B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000),B8_4BIT(00000000) };
  
const struct CRGB SpriteAlfabetoCols[15] = { CRGB(255,0,0), CRGB(251,255,0), CRGB(0,30,255), CRGB(255,169,0), CRGB(83,255,0), CRGB(251,0,255), CRGB(225,89,0), CRGB(195,255,0), CRGB(152,0,187), CRGB(0,0,0), CRGB(0,0,0), CRGB(0,0,0), CRGB(0,0,0), CRGB(0,0,0), CRGB(0,0,0) };

const uint8_t SpriteCoresData[1525] = {
    
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00011100),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00012210),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00012221),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00012222),B8_3BIT(10000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00001222),B8_3BIT(21000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00001222),B8_3BIT(22100000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000122),B8_3BIT(22233333),B8_3BIT(33333333),B8_3BIT(33333000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000011),B8_3BIT(11111111),B8_3BIT(11111111),B8_3BIT(11111140),B8_3BIT(00000000),
  B8_3BIT(00000222),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000222),B8_3BIT(21121212),B8_3BIT(12121212),B8_3BIT(12114444),B8_3BIT(00000000),
  B8_3BIT(00002222),B8_3BIT(20000000),B8_3BIT(00000000),B8_3BIT(00002221),B8_3BIT(11111111),B8_3BIT(11111111),B8_3BIT(11114441),B8_3BIT(11000000),
  B8_3BIT(00022000),B8_3BIT(22000000),B8_3BIT(00000000),B8_3BIT(00222002),B8_3BIT(22222222),B8_3BIT(22222222),B8_3BIT(22222222),B8_3BIT(11100000),
  B8_3BIT(00220000),B8_3BIT(02200000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(02222222),B8_3BIT(22222222),B8_3BIT(22222222),B8_3BIT(22100000),
  B8_3BIT(00220000),B8_3BIT(02200000),B8_3BIT(00002200),B8_3BIT(20000000),B8_3BIT(00022222),B8_3BIT(11111112),B8_3BIT(22222222),B8_3BIT(22000000),
  B8_3BIT(00220000),B8_3BIT(02200000),B8_3BIT(00000022),B8_3BIT(00000000),B8_3BIT(00002221),B8_3BIT(11111122),B8_3BIT(22222222),B8_3BIT(20000000),
  B8_3BIT(00220000),B8_3BIT(02200000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000211),B8_3BIT(11110000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00220000),B8_3BIT(02202000),B8_3BIT(20200020),B8_3BIT(00022200),B8_3BIT(00000011),B8_3BIT(11000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00222222),B8_3BIT(22202000),B8_3BIT(20200202),B8_3BIT(00200020),B8_3BIT(00000111),B8_3BIT(10000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00222222),B8_3BIT(22202000),B8_3BIT(20202000),B8_3BIT(20200020),B8_3BIT(00000111),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00220000),B8_3BIT(02202000),B8_3BIT(20202000),B8_3BIT(20200020),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00220000),B8_3BIT(02202000),B8_3BIT(20202222),B8_3BIT(20200020),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00220000),B8_3BIT(02200202),B8_3BIT(00202000),B8_3BIT(20200020),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00220000),B8_3BIT(02200020),B8_3BIT(00202000),B8_3BIT(20022200),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),
  B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000),B8_3BIT(00000000)};

  
const struct CRGB SpriteCoresCols[7] = { CRGB(255,255,255), CRGB(66,79,244), CRGB(161,161,161), CRGB(106,167,249), CRGB(0,0,0), CRGB(0,0,0), CRGB(0,0,0) };



  cLEDSprites Sprites;
  cSprite sprAlfabeto;
  cSprite sprCores;


  public:
  Alfabeto():Sprites(&leds){};

  void setup(){
    setupAlfabeto();
    LEDS.clear(true);
    FastLED.clear();

  }


boolean loop(){
  
  
 if (receptor.decode(&resultado))  
  {  
    Serial.print("Codigo do botao: ");  
    Serial.println(resultado.value, HEX);  
    codigo = resultado.value; 
    Sprites.RemoveAllSprites();
    FastLED.clear();
    delay(100);
    switch (codigo){     
      case (0x1FE58A7):   
          currentApp = -1;
          return false;         
      case (0x1FEE01F):         
          setupAlfabeto();
          break;
      case (0x1FE50AF):
          setupCores();
          break;  
      }
       receptor.resume();  
    }

 if (SerialBT.available())
    {
      char keyPress = (char)SerialBT.read();
      FastLED.clear();
      Serial.println(keyPress);  
       Sprites.RemoveAllSprites();
    FastLED.clear();
      switch (keyPress)
      {    
            //Menu
          case 'm':
            currentApp = -1;
            return false;
            break;

             
            //Sobre
         // case 'm':
          //  currentApp = 0;
         //   return false;
         //   break;

             
            //Screensaver
          case '!':
            currentApp = 1;
            return false;
            break;
            
          //alfabeto
         case 'l':
            currentApp = 2;
            return false;
            break;

            //Numeros
          case 'n':
            currentApp = 3;
            return false;
            break;

              //Formas
          case 'f':
            currentApp = 4;
            return false;
            break;
            
            //Cores
          case 'c':
            currentApp = 5;
            return false;
            break;
            
             //Padroes
          case 'p':
            currentApp = 6;
            return false;
            break;
            
            //Efeitos1
         case '<':
            currentApp = 7;
            return false;
            break;

                 //Efeitos2
         case '>':
             currentApp = 8;
            return false;
            break;

                 //Efeitos3
         case '[':
             currentApp = 9;
            return false;
            break;

            //Livre
         case '?':
             currentApp = 10;
            return false;
            break;  
            
            //Tetris
          case 't':
            currentApp = 11;
            return false;
            break;

             //breakout
          case 'x':
            currentApp = 12;
            return false;
            break;
            
            //Snake
          case 'q':
            currentApp = 13;
            return false;
            break;




               //Snake
          case 'A':
            setupCores();
            break;


            
      }
    }


    
   Sprites.UpdateSprites();
   Sprites.RenderSprites();
   
   FastLED.show();
   
   return true;  
  }




  private:
  
  void setupAlfabeto() {
    sprAlfabeto.Setup(61, 25, SpriteAlfabetoData, 1, _4BIT, SpriteAlfabetoCols);
    sprAlfabeto.SetPosition(0,0);
    sprAlfabeto.SetFrame(0,0);
    Sprites.AddSprite(&sprAlfabeto);
  }
  
  void setupCores() {
    sprCores.Setup(61, 25, SpriteCoresData, 2, _3BIT, SpriteCoresCols);
    sprCores.SetPosition(0,0);
    sprCores.SetFrame(0,0);
    Sprites.AddSprite(&sprCores);
  }
 
};
